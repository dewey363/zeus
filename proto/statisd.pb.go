// Code generated by protoc-gen-go. DO NOT EDIT.
// source: statisd.proto

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 消息请求体
type StatisdRequest struct {
}

func (m *StatisdRequest) Reset()                    { *m = StatisdRequest{} }
func (m *StatisdRequest) String() string            { return proto1.CompactTextString(m) }
func (*StatisdRequest) ProtoMessage()               {}
func (*StatisdRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

// 消息响应
type StatisdReply struct {
	Code    string `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *StatisdReply) Reset()                    { *m = StatisdReply{} }
func (m *StatisdReply) String() string            { return proto1.CompactTextString(m) }
func (*StatisdReply) ProtoMessage()               {}
func (*StatisdReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *StatisdReply) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *StatisdReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto1.RegisterType((*StatisdRequest)(nil), "proto.StatisdRequest")
	proto1.RegisterType((*StatisdReply)(nil), "proto.StatisdReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for StatisdService service

type StatisdServiceClient interface {
	// 发送消息
	SayReStartStatisd(ctx context.Context, in *StatisdRequest, opts ...grpc.CallOption) (*StatisdReply, error)
}

type statisdServiceClient struct {
	cc *grpc.ClientConn
}

func NewStatisdServiceClient(cc *grpc.ClientConn) StatisdServiceClient {
	return &statisdServiceClient{cc}
}

func (c *statisdServiceClient) SayReStartStatisd(ctx context.Context, in *StatisdRequest, opts ...grpc.CallOption) (*StatisdReply, error) {
	out := new(StatisdReply)
	err := grpc.Invoke(ctx, "/proto.StatisdService/SayReStartStatisd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StatisdService service

type StatisdServiceServer interface {
	// 发送消息
	SayReStartStatisd(context.Context, *StatisdRequest) (*StatisdReply, error)
}

func RegisterStatisdServiceServer(s *grpc.Server, srv StatisdServiceServer) {
	s.RegisterService(&_StatisdService_serviceDesc, srv)
}

func _StatisdService_SayReStartStatisd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatisdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisdServiceServer).SayReStartStatisd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StatisdService/SayReStartStatisd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisdServiceServer).SayReStartStatisd(ctx, req.(*StatisdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StatisdService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.StatisdService",
	HandlerType: (*StatisdServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayReStartStatisd",
			Handler:    _StatisdService_SayReStartStatisd_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "statisd.proto",
}

func init() { proto1.RegisterFile("statisd.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 166 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x2e, 0x49, 0x2c,
	0xc9, 0x2c, 0x4e, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0x02, 0x5c,
	0x7c, 0xc1, 0x10, 0xf1, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x25, 0x1b, 0x2e, 0x1e, 0xb8,
	0x48, 0x41, 0x4e, 0xa5, 0x90, 0x10, 0x17, 0x4b, 0x72, 0x7e, 0x4a, 0xaa, 0x04, 0xa3, 0x02, 0xa3,
	0x06, 0x67, 0x10, 0x98, 0x2d, 0x24, 0xc1, 0xc5, 0x9e, 0x9b, 0x5a, 0x5c, 0x9c, 0x98, 0x9e, 0x2a,
	0xc1, 0x04, 0x16, 0x86, 0x71, 0x8d, 0x82, 0xe1, 0xe6, 0x05, 0xa7, 0x16, 0x95, 0x65, 0x26, 0xa7,
	0x0a, 0x39, 0x72, 0x09, 0x06, 0x27, 0x56, 0x06, 0xa5, 0x06, 0x97, 0x24, 0x16, 0x95, 0x40, 0xe5,
	0x84, 0x44, 0x21, 0xae, 0xd0, 0x43, 0xb5, 0x5b, 0x4a, 0x18, 0x5d, 0xb8, 0x20, 0xa7, 0x52, 0x89,
	0xc1, 0x49, 0x94, 0x8b, 0x2f, 0x2f, 0xb5, 0x44, 0xcf, 0xd4, 0x38, 0xb3, 0x04, 0xa2, 0x60, 0x11,
	0x13, 0x53, 0x94, 0x5f, 0x12, 0x1b, 0x98, 0x6d, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x5b, 0x32,
	0x72, 0x03, 0xda, 0x00, 0x00, 0x00,
}
