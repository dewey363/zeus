// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dispatchd.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	dispatchd.proto
	serverd.proto
	statisd.proto

It has these top-level messages:
	DispatchRequest
	DispatchReply
	TopicsConfig
	TopicsConfigRule
	AppNameRequest
	AppNameReply
	AppNameInfo
	ServerdConfigRequest
	RestartRequest
	EventConfigRequest
	EventConfigReply
	EventSeting
	EventRuleLevel
	EventDevice
	SystemUnitConversion
	EventPush
	ServerdRequest
	ServerdReply
	StatisdRequest
	StatisdReply
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// 消息请求体
type DispatchRequest struct {
	Topics string `protobuf:"bytes,1,opt,name=topics" json:"topics,omitempty"`
}

func (m *DispatchRequest) Reset()                    { *m = DispatchRequest{} }
func (m *DispatchRequest) String() string            { return proto1.CompactTextString(m) }
func (*DispatchRequest) ProtoMessage()               {}
func (*DispatchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DispatchRequest) GetTopics() string {
	if m != nil {
		return m.Topics
	}
	return ""
}

// 消息响应
type DispatchReply struct {
	Code    string          `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Data    []*TopicsConfig `protobuf:"bytes,3,rep,name=data" json:"data,omitempty"`
}

func (m *DispatchReply) Reset()                    { *m = DispatchReply{} }
func (m *DispatchReply) String() string            { return proto1.CompactTextString(m) }
func (*DispatchReply) ProtoMessage()               {}
func (*DispatchReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DispatchReply) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *DispatchReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *DispatchReply) GetData() []*TopicsConfig {
	if m != nil {
		return m.Data
	}
	return nil
}

// 具体每一个指标数据
type TopicsConfig struct {
	Id           int32               `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Topics       string              `protobuf:"bytes,2,opt,name=topics" json:"topics,omitempty"`
	Channel      string              `protobuf:"bytes,3,opt,name=channel" json:"channel,omitempty"`
	ChannelCount int32               `protobuf:"varint,4,opt,name=channel_count,json=channelCount" json:"channel_count,omitempty"`
	DataType     string              `protobuf:"bytes,5,opt,name=data_type,json=dataType" json:"data_type,omitempty"`
	RuleList     []*TopicsConfigRule `protobuf:"bytes,6,rep,name=rule_list,json=ruleList" json:"rule_list,omitempty"`
}

func (m *TopicsConfig) Reset()                    { *m = TopicsConfig{} }
func (m *TopicsConfig) String() string            { return proto1.CompactTextString(m) }
func (*TopicsConfig) ProtoMessage()               {}
func (*TopicsConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TopicsConfig) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TopicsConfig) GetTopics() string {
	if m != nil {
		return m.Topics
	}
	return ""
}

func (m *TopicsConfig) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *TopicsConfig) GetChannelCount() int32 {
	if m != nil {
		return m.ChannelCount
	}
	return 0
}

func (m *TopicsConfig) GetDataType() string {
	if m != nil {
		return m.DataType
	}
	return ""
}

func (m *TopicsConfig) GetRuleList() []*TopicsConfigRule {
	if m != nil {
		return m.RuleList
	}
	return nil
}

// 解析规则
type TopicsConfigRule struct {
	Id         int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Mapped     string `protobuf:"bytes,2,opt,name=mapped" json:"mapped,omitempty"`
	TextUnType string `protobuf:"bytes,3,opt,name=text_un_type,json=textUnType" json:"text_un_type,omitempty"`
	TextUnRule string `protobuf:"bytes,4,opt,name=text_un_rule,json=textUnRule" json:"text_un_rule,omitempty"`
	DateFormat string `protobuf:"bytes,5,opt,name=date_format,json=dateFormat" json:"date_format,omitempty"`
	Appname    string `protobuf:"bytes,6,opt,name=appname" json:"appname,omitempty"`
	Tag        string `protobuf:"bytes,7,opt,name=tag" json:"tag,omitempty"`
}

func (m *TopicsConfigRule) Reset()                    { *m = TopicsConfigRule{} }
func (m *TopicsConfigRule) String() string            { return proto1.CompactTextString(m) }
func (*TopicsConfigRule) ProtoMessage()               {}
func (*TopicsConfigRule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TopicsConfigRule) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TopicsConfigRule) GetMapped() string {
	if m != nil {
		return m.Mapped
	}
	return ""
}

func (m *TopicsConfigRule) GetTextUnType() string {
	if m != nil {
		return m.TextUnType
	}
	return ""
}

func (m *TopicsConfigRule) GetTextUnRule() string {
	if m != nil {
		return m.TextUnRule
	}
	return ""
}

func (m *TopicsConfigRule) GetDateFormat() string {
	if m != nil {
		return m.DateFormat
	}
	return ""
}

func (m *TopicsConfigRule) GetAppname() string {
	if m != nil {
		return m.Appname
	}
	return ""
}

func (m *TopicsConfigRule) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

// 获取appName服务
type AppNameRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *AppNameRequest) Reset()                    { *m = AppNameRequest{} }
func (m *AppNameRequest) String() string            { return proto1.CompactTextString(m) }
func (*AppNameRequest) ProtoMessage()               {}
func (*AppNameRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AppNameRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// appname响应
type AppNameReply struct {
	Code    string         `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
	Message string         `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Data    []*AppNameInfo `protobuf:"bytes,3,rep,name=data" json:"data,omitempty"`
}

func (m *AppNameReply) Reset()                    { *m = AppNameReply{} }
func (m *AppNameReply) String() string            { return proto1.CompactTextString(m) }
func (*AppNameReply) ProtoMessage()               {}
func (*AppNameReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AppNameReply) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *AppNameReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *AppNameReply) GetData() []*AppNameInfo {
	if m != nil {
		return m.Data
	}
	return nil
}

// appname 列表
type AppNameInfo struct {
	Id      int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	AppName string `protobuf:"bytes,2,opt,name=app_name,json=appName" json:"app_name,omitempty"`
	Field   string `protobuf:"bytes,3,opt,name=field" json:"field,omitempty"`
	Type    string `protobuf:"bytes,4,opt,name=type" json:"type,omitempty"`
	Unit    string `protobuf:"bytes,5,opt,name=unit" json:"unit,omitempty"`
	Index   int32  `protobuf:"varint,6,opt,name=index" json:"index,omitempty"`
}

func (m *AppNameInfo) Reset()                    { *m = AppNameInfo{} }
func (m *AppNameInfo) String() string            { return proto1.CompactTextString(m) }
func (*AppNameInfo) ProtoMessage()               {}
func (*AppNameInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AppNameInfo) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AppNameInfo) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *AppNameInfo) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *AppNameInfo) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AppNameInfo) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

func (m *AppNameInfo) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

// 上报数据处理srverd重启地址
type ServerdConfigRequest struct {
	ServerId  string `protobuf:"bytes,1,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
	IpAddress string `protobuf:"bytes,2,opt,name=ip_address,json=ipAddress" json:"ip_address,omitempty"`
	Port      string `protobuf:"bytes,3,opt,name=port" json:"port,omitempty"`
}

func (m *ServerdConfigRequest) Reset()                    { *m = ServerdConfigRequest{} }
func (m *ServerdConfigRequest) String() string            { return proto1.CompactTextString(m) }
func (*ServerdConfigRequest) ProtoMessage()               {}
func (*ServerdConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ServerdConfigRequest) GetServerId() string {
	if m != nil {
		return m.ServerId
	}
	return ""
}

func (m *ServerdConfigRequest) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *ServerdConfigRequest) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

// 重启服务参数-无用
type RestartRequest struct {
}

func (m *RestartRequest) Reset()                    { *m = RestartRequest{} }
func (m *RestartRequest) String() string            { return proto1.CompactTextString(m) }
func (*RestartRequest) ProtoMessage()               {}
func (*RestartRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

// 告警配置获取列表
// 消息请求体
type EventConfigRequest struct {
	Field string `protobuf:"bytes,1,opt,name=field" json:"field,omitempty"`
}

func (m *EventConfigRequest) Reset()                    { *m = EventConfigRequest{} }
func (m *EventConfigRequest) String() string            { return proto1.CompactTextString(m) }
func (*EventConfigRequest) ProtoMessage()               {}
func (*EventConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *EventConfigRequest) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

// 消息响应
type EventConfigReply struct {
	Code    string         `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
	Message string         `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Data    []*EventSeting `protobuf:"bytes,3,rep,name=data" json:"data,omitempty"`
}

func (m *EventConfigReply) Reset()                    { *m = EventConfigReply{} }
func (m *EventConfigReply) String() string            { return proto1.CompactTextString(m) }
func (*EventConfigReply) ProtoMessage()               {}
func (*EventConfigReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *EventConfigReply) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *EventConfigReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *EventConfigReply) GetData() []*EventSeting {
	if m != nil {
		return m.Data
	}
	return nil
}

// 告警设置
type EventSeting struct {
	Id              int32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name            string            `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	AppName         string            `protobuf:"bytes,3,opt,name=app_name,json=appName" json:"app_name,omitempty"`
	Field           string            `protobuf:"bytes,4,opt,name=field" json:"field,omitempty"`
	ValueType       string            `protobuf:"bytes,5,opt,name=value_type,json=valueType" json:"value_type,omitempty"`
	Describe        string            `protobuf:"bytes,6,opt,name=describe" json:"describe,omitempty"`
	ContinuedTime   int32             `protobuf:"varint,7,opt,name=continued_time,json=continuedTime" json:"continued_time,omitempty"`
	CycleTime       string            `protobuf:"bytes,8,opt,name=cycle_time,json=cycleTime" json:"cycle_time,omitempty"`
	Enable          int32             `protobuf:"varint,9,opt,name=enable" json:"enable,omitempty"`
	IsDelete        int32             `protobuf:"varint,10,opt,name=is_delete,json=isDelete" json:"is_delete,omitempty"`
	EventRuleList   []*EventRuleLevel `protobuf:"bytes,11,rep,name=event_rule_list,json=eventRuleList" json:"event_rule_list,omitempty"`
	EventDeviceList []*EventDevice    `protobuf:"bytes,12,rep,name=event_device_list,json=eventDeviceList" json:"event_device_list,omitempty"`
	TemplateName    string            `protobuf:"bytes,13,opt,name=template_name,json=templateName" json:"template_name,omitempty"`
	TemplateContent string            `protobuf:"bytes,14,opt,name=template_content,json=templateContent" json:"template_content,omitempty"`
	EventPushList   []*EventPush      `protobuf:"bytes,15,rep,name=event_push_list,json=eventPushList" json:"event_push_list,omitempty"`
}

func (m *EventSeting) Reset()                    { *m = EventSeting{} }
func (m *EventSeting) String() string            { return proto1.CompactTextString(m) }
func (*EventSeting) ProtoMessage()               {}
func (*EventSeting) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *EventSeting) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EventSeting) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EventSeting) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *EventSeting) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *EventSeting) GetValueType() string {
	if m != nil {
		return m.ValueType
	}
	return ""
}

func (m *EventSeting) GetDescribe() string {
	if m != nil {
		return m.Describe
	}
	return ""
}

func (m *EventSeting) GetContinuedTime() int32 {
	if m != nil {
		return m.ContinuedTime
	}
	return 0
}

func (m *EventSeting) GetCycleTime() string {
	if m != nil {
		return m.CycleTime
	}
	return ""
}

func (m *EventSeting) GetEnable() int32 {
	if m != nil {
		return m.Enable
	}
	return 0
}

func (m *EventSeting) GetIsDelete() int32 {
	if m != nil {
		return m.IsDelete
	}
	return 0
}

func (m *EventSeting) GetEventRuleList() []*EventRuleLevel {
	if m != nil {
		return m.EventRuleList
	}
	return nil
}

func (m *EventSeting) GetEventDeviceList() []*EventDevice {
	if m != nil {
		return m.EventDeviceList
	}
	return nil
}

func (m *EventSeting) GetTemplateName() string {
	if m != nil {
		return m.TemplateName
	}
	return ""
}

func (m *EventSeting) GetTemplateContent() string {
	if m != nil {
		return m.TemplateContent
	}
	return ""
}

func (m *EventSeting) GetEventPushList() []*EventPush {
	if m != nil {
		return m.EventPushList
	}
	return nil
}

// 告警规则
type EventRuleLevel struct {
	Id                       int32                 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	EventLevelId             int32                 `protobuf:"varint,2,opt,name=event_level_id,json=eventLevelId" json:"event_level_id,omitempty"`
	EventSetingId            int32                 `protobuf:"varint,3,opt,name=event_seting_id,json=eventSetingId" json:"event_seting_id,omitempty"`
	Value                    string                `protobuf:"bytes,4,opt,name=value" json:"value,omitempty"`
	Expression               string                `protobuf:"bytes,5,opt,name=expression" json:"expression,omitempty"`
	Sort                     int32                 `protobuf:"varint,6,opt,name=sort" json:"sort,omitempty"`
	Unit                     string                `protobuf:"bytes,7,opt,name=unit" json:"unit,omitempty"`
	LevelName                string                `protobuf:"bytes,8,opt,name=level_name,json=levelName" json:"level_name,omitempty"`
	Level                    int32                 `protobuf:"varint,9,opt,name=level" json:"level,omitempty"`
	SystemUnitConversionInfo *SystemUnitConversion `protobuf:"bytes,10,opt,name=system_unit_conversion_info,json=systemUnitConversionInfo" json:"system_unit_conversion_info,omitempty"`
}

func (m *EventRuleLevel) Reset()                    { *m = EventRuleLevel{} }
func (m *EventRuleLevel) String() string            { return proto1.CompactTextString(m) }
func (*EventRuleLevel) ProtoMessage()               {}
func (*EventRuleLevel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *EventRuleLevel) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EventRuleLevel) GetEventLevelId() int32 {
	if m != nil {
		return m.EventLevelId
	}
	return 0
}

func (m *EventRuleLevel) GetEventSetingId() int32 {
	if m != nil {
		return m.EventSetingId
	}
	return 0
}

func (m *EventRuleLevel) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *EventRuleLevel) GetExpression() string {
	if m != nil {
		return m.Expression
	}
	return ""
}

func (m *EventRuleLevel) GetSort() int32 {
	if m != nil {
		return m.Sort
	}
	return 0
}

func (m *EventRuleLevel) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

func (m *EventRuleLevel) GetLevelName() string {
	if m != nil {
		return m.LevelName
	}
	return ""
}

func (m *EventRuleLevel) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *EventRuleLevel) GetSystemUnitConversionInfo() *SystemUnitConversion {
	if m != nil {
		return m.SystemUnitConversionInfo
	}
	return nil
}

// 告警设备列表
type EventDevice struct {
	Id            int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	EventSetingId int32  `protobuf:"varint,2,opt,name=event_seting_id,json=eventSetingId" json:"event_seting_id,omitempty"`
	DeviceId      int32  `protobuf:"varint,3,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	HostName      string `protobuf:"bytes,4,opt,name=host_name,json=hostName" json:"host_name,omitempty"`
	Ip            string `protobuf:"bytes,5,opt,name=ip" json:"ip,omitempty"`
	DeviceType    string `protobuf:"bytes,6,opt,name=device_type,json=deviceType" json:"device_type,omitempty"`
	GroupName     string `protobuf:"bytes,7,opt,name=group_name,json=groupName" json:"group_name,omitempty"`
}

func (m *EventDevice) Reset()                    { *m = EventDevice{} }
func (m *EventDevice) String() string            { return proto1.CompactTextString(m) }
func (*EventDevice) ProtoMessage()               {}
func (*EventDevice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *EventDevice) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EventDevice) GetEventSetingId() int32 {
	if m != nil {
		return m.EventSetingId
	}
	return 0
}

func (m *EventDevice) GetDeviceId() int32 {
	if m != nil {
		return m.DeviceId
	}
	return 0
}

func (m *EventDevice) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *EventDevice) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *EventDevice) GetDeviceType() string {
	if m != nil {
		return m.DeviceType
	}
	return ""
}

func (m *EventDevice) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

// 单位转换
type SystemUnitConversion struct {
	Id           int32   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	OriginalUnit string  `protobuf:"bytes,2,opt,name=original_unit,json=originalUnit" json:"original_unit,omitempty"`
	AfterUnit    string  `protobuf:"bytes,3,opt,name=after_unit,json=afterUnit" json:"after_unit,omitempty"`
	Multiple     float64 `protobuf:"fixed64,4,opt,name=multiple" json:"multiple,omitempty"`
	LuaCode      string  `protobuf:"bytes,5,opt,name=lua_code,json=luaCode" json:"lua_code,omitempty"`
	Type         int32   `protobuf:"varint,6,opt,name=type" json:"type,omitempty"`
}

func (m *SystemUnitConversion) Reset()                    { *m = SystemUnitConversion{} }
func (m *SystemUnitConversion) String() string            { return proto1.CompactTextString(m) }
func (*SystemUnitConversion) ProtoMessage()               {}
func (*SystemUnitConversion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *SystemUnitConversion) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SystemUnitConversion) GetOriginalUnit() string {
	if m != nil {
		return m.OriginalUnit
	}
	return ""
}

func (m *SystemUnitConversion) GetAfterUnit() string {
	if m != nil {
		return m.AfterUnit
	}
	return ""
}

func (m *SystemUnitConversion) GetMultiple() float64 {
	if m != nil {
		return m.Multiple
	}
	return 0
}

func (m *SystemUnitConversion) GetLuaCode() string {
	if m != nil {
		return m.LuaCode
	}
	return ""
}

func (m *SystemUnitConversion) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

// 告警推送列表
type EventPush struct {
	Id            int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	EventSetingId int32  `protobuf:"varint,2,opt,name=event_seting_id,json=eventSetingId" json:"event_seting_id,omitempty"`
	Url           string `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
	Name          string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	DataType      int32  `protobuf:"varint,5,opt,name=data_type,json=dataType" json:"data_type,omitempty"`
}

func (m *EventPush) Reset()                    { *m = EventPush{} }
func (m *EventPush) String() string            { return proto1.CompactTextString(m) }
func (*EventPush) ProtoMessage()               {}
func (*EventPush) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *EventPush) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EventPush) GetEventSetingId() int32 {
	if m != nil {
		return m.EventSetingId
	}
	return 0
}

func (m *EventPush) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *EventPush) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EventPush) GetDataType() int32 {
	if m != nil {
		return m.DataType
	}
	return 0
}

func init() {
	proto1.RegisterType((*DispatchRequest)(nil), "proto.DispatchRequest")
	proto1.RegisterType((*DispatchReply)(nil), "proto.DispatchReply")
	proto1.RegisterType((*TopicsConfig)(nil), "proto.TopicsConfig")
	proto1.RegisterType((*TopicsConfigRule)(nil), "proto.TopicsConfigRule")
	proto1.RegisterType((*AppNameRequest)(nil), "proto.AppNameRequest")
	proto1.RegisterType((*AppNameReply)(nil), "proto.AppNameReply")
	proto1.RegisterType((*AppNameInfo)(nil), "proto.AppNameInfo")
	proto1.RegisterType((*ServerdConfigRequest)(nil), "proto.ServerdConfigRequest")
	proto1.RegisterType((*RestartRequest)(nil), "proto.RestartRequest")
	proto1.RegisterType((*EventConfigRequest)(nil), "proto.EventConfigRequest")
	proto1.RegisterType((*EventConfigReply)(nil), "proto.EventConfigReply")
	proto1.RegisterType((*EventSeting)(nil), "proto.EventSeting")
	proto1.RegisterType((*EventRuleLevel)(nil), "proto.EventRuleLevel")
	proto1.RegisterType((*EventDevice)(nil), "proto.EventDevice")
	proto1.RegisterType((*SystemUnitConversion)(nil), "proto.SystemUnitConversion")
	proto1.RegisterType((*EventPush)(nil), "proto.EventPush")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DispatchConfigService service

type DispatchConfigServiceClient interface {
	// 获取serverd配置
	SayDispatchConfig(ctx context.Context, in *DispatchRequest, opts ...grpc.CallOption) (*DispatchReply, error)
	// 获取appname列表
	SayGetAppNameList(ctx context.Context, in *AppNameRequest, opts ...grpc.CallOption) (*AppNameReply, error)
	// 获取告警解析规则
	// rpc SayGetEventSetingsList(EventRequest) returns (EventReply) {}
	// 获取告警配置
	SayEventSetingsConfig(ctx context.Context, in *EventConfigRequest, opts ...grpc.CallOption) (*EventConfigReply, error)
}

type dispatchConfigServiceClient struct {
	cc *grpc.ClientConn
}

func NewDispatchConfigServiceClient(cc *grpc.ClientConn) DispatchConfigServiceClient {
	return &dispatchConfigServiceClient{cc}
}

func (c *dispatchConfigServiceClient) SayDispatchConfig(ctx context.Context, in *DispatchRequest, opts ...grpc.CallOption) (*DispatchReply, error) {
	out := new(DispatchReply)
	err := grpc.Invoke(ctx, "/proto.DispatchConfigService/SayDispatchConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dispatchConfigServiceClient) SayGetAppNameList(ctx context.Context, in *AppNameRequest, opts ...grpc.CallOption) (*AppNameReply, error) {
	out := new(AppNameReply)
	err := grpc.Invoke(ctx, "/proto.DispatchConfigService/SayGetAppNameList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dispatchConfigServiceClient) SayEventSetingsConfig(ctx context.Context, in *EventConfigRequest, opts ...grpc.CallOption) (*EventConfigReply, error) {
	out := new(EventConfigReply)
	err := grpc.Invoke(ctx, "/proto.DispatchConfigService/SayEventSetingsConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DispatchConfigService service

type DispatchConfigServiceServer interface {
	// 获取serverd配置
	SayDispatchConfig(context.Context, *DispatchRequest) (*DispatchReply, error)
	// 获取appname列表
	SayGetAppNameList(context.Context, *AppNameRequest) (*AppNameReply, error)
	// 获取告警解析规则
	// rpc SayGetEventSetingsList(EventRequest) returns (EventReply) {}
	// 获取告警配置
	SayEventSetingsConfig(context.Context, *EventConfigRequest) (*EventConfigReply, error)
}

func RegisterDispatchConfigServiceServer(s *grpc.Server, srv DispatchConfigServiceServer) {
	s.RegisterService(&_DispatchConfigService_serviceDesc, srv)
}

func _DispatchConfigService_SayDispatchConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DispatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatchConfigServiceServer).SayDispatchConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DispatchConfigService/SayDispatchConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatchConfigServiceServer).SayDispatchConfig(ctx, req.(*DispatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DispatchConfigService_SayGetAppNameList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatchConfigServiceServer).SayGetAppNameList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DispatchConfigService/SayGetAppNameList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatchConfigServiceServer).SayGetAppNameList(ctx, req.(*AppNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DispatchConfigService_SayEventSetingsConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatchConfigServiceServer).SayEventSetingsConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DispatchConfigService/SayEventSetingsConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatchConfigServiceServer).SayEventSetingsConfig(ctx, req.(*EventConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DispatchConfigService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DispatchConfigService",
	HandlerType: (*DispatchConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayDispatchConfig",
			Handler:    _DispatchConfigService_SayDispatchConfig_Handler,
		},
		{
			MethodName: "SayGetAppNameList",
			Handler:    _DispatchConfigService_SayGetAppNameList_Handler,
		},
		{
			MethodName: "SayEventSetingsConfig",
			Handler:    _DispatchConfigService_SayEventSetingsConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dispatchd.proto",
}

// Client API for ReportServerdService service

type ReportServerdServiceClient interface {
	// 开启服务上报
	SayReportServerd(ctx context.Context, in *ServerdConfigRequest, opts ...grpc.CallOption) (*DispatchReply, error)
	// 停止服务上报
	SayReportServerdStop(ctx context.Context, in *ServerdConfigRequest, opts ...grpc.CallOption) (*DispatchReply, error)
	// 调度器重启所有serverd服务
	SayRestartServerd(ctx context.Context, in *RestartRequest, opts ...grpc.CallOption) (*DispatchReply, error)
	// 调度器重启服务
	SayRestartStatisd(ctx context.Context, in *RestartRequest, opts ...grpc.CallOption) (*DispatchReply, error)
}

type reportServerdServiceClient struct {
	cc *grpc.ClientConn
}

func NewReportServerdServiceClient(cc *grpc.ClientConn) ReportServerdServiceClient {
	return &reportServerdServiceClient{cc}
}

func (c *reportServerdServiceClient) SayReportServerd(ctx context.Context, in *ServerdConfigRequest, opts ...grpc.CallOption) (*DispatchReply, error) {
	out := new(DispatchReply)
	err := grpc.Invoke(ctx, "/proto.ReportServerdService/SayReportServerd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServerdServiceClient) SayReportServerdStop(ctx context.Context, in *ServerdConfigRequest, opts ...grpc.CallOption) (*DispatchReply, error) {
	out := new(DispatchReply)
	err := grpc.Invoke(ctx, "/proto.ReportServerdService/SayReportServerdStop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServerdServiceClient) SayRestartServerd(ctx context.Context, in *RestartRequest, opts ...grpc.CallOption) (*DispatchReply, error) {
	out := new(DispatchReply)
	err := grpc.Invoke(ctx, "/proto.ReportServerdService/SayRestartServerd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServerdServiceClient) SayRestartStatisd(ctx context.Context, in *RestartRequest, opts ...grpc.CallOption) (*DispatchReply, error) {
	out := new(DispatchReply)
	err := grpc.Invoke(ctx, "/proto.ReportServerdService/SayRestartStatisd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ReportServerdService service

type ReportServerdServiceServer interface {
	// 开启服务上报
	SayReportServerd(context.Context, *ServerdConfigRequest) (*DispatchReply, error)
	// 停止服务上报
	SayReportServerdStop(context.Context, *ServerdConfigRequest) (*DispatchReply, error)
	// 调度器重启所有serverd服务
	SayRestartServerd(context.Context, *RestartRequest) (*DispatchReply, error)
	// 调度器重启服务
	SayRestartStatisd(context.Context, *RestartRequest) (*DispatchReply, error)
}

func RegisterReportServerdServiceServer(s *grpc.Server, srv ReportServerdServiceServer) {
	s.RegisterService(&_ReportServerdService_serviceDesc, srv)
}

func _ReportServerdService_SayReportServerd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerdConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServerdServiceServer).SayReportServerd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ReportServerdService/SayReportServerd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServerdServiceServer).SayReportServerd(ctx, req.(*ServerdConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportServerdService_SayReportServerdStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerdConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServerdServiceServer).SayReportServerdStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ReportServerdService/SayReportServerdStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServerdServiceServer).SayReportServerdStop(ctx, req.(*ServerdConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportServerdService_SayRestartServerd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServerdServiceServer).SayRestartServerd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ReportServerdService/SayRestartServerd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServerdServiceServer).SayRestartServerd(ctx, req.(*RestartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportServerdService_SayRestartStatisd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServerdServiceServer).SayRestartStatisd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ReportServerdService/SayRestartStatisd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServerdServiceServer).SayRestartStatisd(ctx, req.(*RestartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReportServerdService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ReportServerdService",
	HandlerType: (*ReportServerdServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayReportServerd",
			Handler:    _ReportServerdService_SayReportServerd_Handler,
		},
		{
			MethodName: "SayReportServerdStop",
			Handler:    _ReportServerdService_SayReportServerdStop_Handler,
		},
		{
			MethodName: "SayRestartServerd",
			Handler:    _ReportServerdService_SayRestartServerd_Handler,
		},
		{
			MethodName: "SayRestartStatisd",
			Handler:    _ReportServerdService_SayRestartStatisd_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dispatchd.proto",
}

func init() { proto1.RegisterFile("dispatchd.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1235 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x4d, 0x6e, 0xdb, 0xc6,
	0x17, 0xff, 0x93, 0x92, 0x6c, 0xe9, 0x59, 0x92, 0x95, 0x89, 0x9d, 0x30, 0x36, 0x9c, 0x7f, 0xc0,
	0xa4, 0x69, 0xd2, 0x45, 0x16, 0x4e, 0x0b, 0x74, 0xd3, 0x02, 0x89, 0xd3, 0x06, 0x46, 0xd3, 0x20,
	0xa0, 0x92, 0x4d, 0x36, 0xc4, 0x44, 0x7c, 0xb2, 0x06, 0xa0, 0xc8, 0x29, 0x39, 0x14, 0xac, 0x0b,
	0x74, 0xd5, 0x4b, 0xb4, 0x67, 0x68, 0xef, 0x50, 0xa0, 0x8b, 0x9e, 0xa0, 0x57, 0xe8, 0x19, 0x8a,
	0x79, 0x33, 0x43, 0x51, 0x96, 0x02, 0x34, 0x41, 0x57, 0x9a, 0xf7, 0x9b, 0xa7, 0xf7, 0xf1, 0x9b,
	0xf7, 0x41, 0xd8, 0x4f, 0x44, 0x29, 0xb9, 0x9a, 0xcc, 0x92, 0x47, 0xb2, 0xc8, 0x55, 0xce, 0x3a,
	0xf4, 0x13, 0x3e, 0x84, 0xfd, 0x67, 0xf6, 0x26, 0xc2, 0x1f, 0x2a, 0x2c, 0x15, 0xbb, 0x01, 0x3b,
	0x2a, 0x97, 0x62, 0x52, 0x06, 0xde, 0x1d, 0xef, 0x41, 0x2f, 0xb2, 0x52, 0x38, 0x85, 0xc1, 0x4a,
	0x55, 0xa6, 0x4b, 0xc6, 0xa0, 0x3d, 0xc9, 0x13, 0xb4, 0x6a, 0x74, 0x66, 0x01, 0xec, 0xce, 0xb1,
	0x2c, 0xf9, 0x05, 0x06, 0x3e, 0xc1, 0x4e, 0x64, 0x9f, 0x42, 0x3b, 0xe1, 0x8a, 0x07, 0xad, 0x3b,
	0xad, 0x07, 0x7b, 0xa7, 0xd7, 0x4d, 0x18, 0x8f, 0x5e, 0x93, 0xed, 0xb3, 0x3c, 0x9b, 0x8a, 0x8b,
	0x88, 0x14, 0xc2, 0xdf, 0x3d, 0xe8, 0x37, 0x61, 0x36, 0x04, 0x5f, 0x24, 0xe4, 0xa5, 0x13, 0xf9,
	0x22, 0x69, 0x04, 0xe8, 0x37, 0x03, 0xd4, 0xbe, 0x27, 0x33, 0x9e, 0x65, 0x98, 0x06, 0x2d, 0xe3,
	0xdb, 0x8a, 0xec, 0x2e, 0x0c, 0xec, 0x31, 0x9e, 0xe4, 0x55, 0xa6, 0x82, 0x36, 0x19, 0xeb, 0x5b,
	0xf0, 0x4c, 0x63, 0xec, 0x18, 0x7a, 0xda, 0x7f, 0xac, 0x96, 0x12, 0x83, 0x0e, 0x19, 0xe8, 0x6a,
	0xe0, 0xf5, 0x52, 0x22, 0xfb, 0x1c, 0x7a, 0x45, 0x95, 0x62, 0x9c, 0x8a, 0x52, 0x05, 0x3b, 0x94,
	0xc2, 0xcd, 0x6d, 0x29, 0x54, 0x29, 0x46, 0x5d, 0xad, 0xf9, 0x42, 0x94, 0x2a, 0xfc, 0xc3, 0x83,
	0xd1, 0xd5, 0xeb, 0x6d, 0xe9, 0xcc, 0xb9, 0x94, 0x98, 0xb8, 0x74, 0x8c, 0xc4, 0xee, 0x40, 0x5f,
	0xe1, 0xa5, 0x8a, 0xab, 0xcc, 0x84, 0x64, 0x72, 0x02, 0x8d, 0xbd, 0xc9, 0x28, 0xa8, 0x86, 0x86,
	0x76, 0x49, 0x59, 0xd5, 0x1a, 0xe4, 0xeb, 0xff, 0xb0, 0x97, 0x70, 0x85, 0xf1, 0x34, 0x2f, 0xe6,
	0x5c, 0xd9, 0xac, 0x40, 0x43, 0xdf, 0x12, 0xa2, 0x39, 0xe3, 0x52, 0x66, 0x7c, 0x8e, 0xc1, 0x8e,
	0xe1, 0xcc, 0x8a, 0x6c, 0x04, 0x2d, 0xc5, 0x2f, 0x82, 0x5d, 0x42, 0xf5, 0x31, 0xbc, 0x07, 0xc3,
	0x27, 0x52, 0xbe, 0xe4, 0x73, 0x74, 0xa5, 0xc2, 0xa0, 0x4d, 0x7f, 0xb5, 0x15, 0xa0, 0xcf, 0x61,
	0x02, 0xfd, 0x5a, 0xeb, 0xc3, 0xab, 0xe4, 0xfe, 0x5a, 0x95, 0x30, 0x4b, 0xb1, 0x35, 0x78, 0x9e,
	0x4d, 0x73, 0x5b, 0x24, 0x3f, 0x79, 0xb0, 0xd7, 0x40, 0x37, 0x48, 0xbd, 0x05, 0x5d, 0x2e, 0x65,
	0x4c, 0xd1, 0xf9, 0x75, 0x62, 0x5a, 0x9d, 0x1d, 0x40, 0x67, 0x2a, 0x30, 0x4d, 0x2c, 0xa1, 0x46,
	0xd0, 0x61, 0x12, 0xcb, 0x86, 0x43, 0x3a, 0x6b, 0xac, 0xca, 0x84, 0xa3, 0x8d, 0xce, 0xfa, 0xdf,
	0x22, 0x4b, 0xf0, 0x92, 0xe8, 0xea, 0x44, 0x46, 0x08, 0xa7, 0x70, 0x30, 0xc6, 0x62, 0x81, 0x45,
	0x62, 0x1f, 0xda, 0x12, 0x74, 0x0c, 0xbd, 0x92, 0xf0, 0xd8, 0x46, 0xd7, 0x8b, 0xba, 0x06, 0x38,
	0x4f, 0xd8, 0x09, 0x80, 0x90, 0x31, 0x4f, 0x92, 0x02, 0x4b, 0x57, 0xcb, 0x3d, 0x21, 0x9f, 0x18,
	0x40, 0x7b, 0x97, 0x79, 0xa1, 0x6c, 0x98, 0x74, 0x0e, 0x47, 0x30, 0x8c, 0xb0, 0x54, 0xbc, 0x50,
	0xd6, 0x43, 0xf8, 0x19, 0xb0, 0x6f, 0x16, 0x98, 0xa9, 0x75, 0xbf, 0x75, 0x8e, 0x5e, 0x23, 0xc7,
	0x70, 0x06, 0xa3, 0x35, 0xdd, 0xff, 0xea, 0x79, 0xc8, 0xe8, 0x18, 0x95, 0xc8, 0x5c, 0x0f, 0xff,
	0xdc, 0x86, 0xbd, 0x06, 0xba, 0xf1, 0x3c, 0xae, 0x70, 0xfc, 0x55, 0xe1, 0xac, 0x3d, 0x59, 0xeb,
	0x3d, 0x4f, 0xd6, 0x6e, 0x3e, 0xd9, 0x09, 0xc0, 0x82, 0xa7, 0x15, 0x36, 0x3b, 0xb6, 0x47, 0x08,
	0x75, 0xc7, 0x11, 0x74, 0x13, 0x2c, 0x27, 0x85, 0x78, 0xe7, 0x6a, 0xbb, 0x96, 0xd9, 0x27, 0x30,
	0x9c, 0xe4, 0x99, 0x12, 0x59, 0x85, 0x49, 0xac, 0xc4, 0x1c, 0xa9, 0xce, 0x3b, 0xd1, 0xa0, 0x46,
	0x5f, 0x8b, 0x39, 0x6a, 0x0f, 0x93, 0xe5, 0x24, 0x45, 0xa3, 0xd2, 0x35, 0x1e, 0x08, 0xa1, 0xeb,
	0x1b, 0xb0, 0x83, 0x19, 0x7f, 0x97, 0x62, 0xd0, 0xa3, 0x7f, 0x5b, 0x49, 0xbf, 0xba, 0x28, 0xe3,
	0x04, 0x53, 0x54, 0x18, 0x00, 0x5d, 0x75, 0x45, 0xf9, 0x8c, 0x64, 0xf6, 0x15, 0xec, 0xa3, 0x66,
	0x26, 0x5e, 0xcd, 0x93, 0x3d, 0x62, 0xf3, 0xb0, 0xc9, 0xa6, 0xee, 0xde, 0x17, 0xb8, 0xc0, 0x34,
	0x1a, 0x60, 0x2d, 0x8b, 0x52, 0xb1, 0xaf, 0xe1, 0x9a, 0xf9, 0x7b, 0x82, 0x0b, 0x31, 0xb1, 0x06,
	0xfa, 0x9b, 0xcf, 0xf1, 0x8c, 0xae, 0x23, 0xe3, 0xcb, 0x08, 0xf4, 0xff, 0xbb, 0x30, 0x50, 0x38,
	0x97, 0xa9, 0x9e, 0x0a, 0x44, 0xf5, 0x80, 0xb2, 0xea, 0x3b, 0x90, 0xf8, 0x7e, 0x08, 0xa3, 0x5a,
	0x49, 0x33, 0x82, 0x99, 0x0a, 0x86, 0xa4, 0xb7, 0xef, 0xf0, 0x33, 0x03, 0xb3, 0x2f, 0x5d, 0x3a,
	0xb2, 0x2a, 0x67, 0x26, 0x9a, 0x7d, 0x8a, 0x66, 0xd4, 0x8c, 0xe6, 0x55, 0x55, 0xce, 0x6c, 0x26,
	0xfa, 0x48, 0xc3, 0xf1, 0x2f, 0x1f, 0x86, 0xeb, 0xb9, 0x6e, 0x94, 0xc9, 0x3d, 0x18, 0x1a, 0xe3,
	0xa9, 0xbe, 0xd6, 0x3d, 0xe4, 0x9b, 0xc1, 0x4d, 0x28, 0xfd, 0xe7, 0x3c, 0x61, 0xf7, 0x5d, 0x08,
	0x25, 0x15, 0x9b, 0x56, 0x6b, 0x99, 0xd7, 0xc4, 0x55, 0x09, 0x9e, 0x27, 0xba, 0x8a, 0xa8, 0x3a,
	0x5c, 0x15, 0x91, 0xc0, 0x6e, 0x03, 0xe0, 0xa5, 0xd4, 0x1d, 0x27, 0xf2, 0xcc, 0x4d, 0xc8, 0x15,
	0xa2, 0x4b, 0xb5, 0xd4, 0x6d, 0x68, 0xfa, 0x9d, 0xce, 0xf5, 0x60, 0xd8, 0x6d, 0x0c, 0x86, 0x13,
	0x00, 0x13, 0x25, 0xb1, 0x6a, 0x6b, 0x85, 0x10, 0x57, 0xc2, 0x24, 0xd8, 0x52, 0x31, 0x02, 0x7b,
	0x0b, 0xc7, 0xe5, 0xb2, 0x54, 0x38, 0x8f, 0xb5, 0x0d, 0xcd, 0xf5, 0x02, 0x0b, 0xed, 0x36, 0x16,
	0xd9, 0x34, 0xa7, 0xda, 0xd9, 0x3b, 0x3d, 0xb6, 0x4c, 0x8e, 0x49, 0xf3, 0x4d, 0x26, 0x74, 0x03,
	0x5b, 0xbd, 0x28, 0x28, 0xb7, 0xa0, 0x7a, 0x24, 0x86, 0x7f, 0x7a, 0xb6, 0x07, 0xcd, 0xeb, 0x6f,
	0x90, 0xbb, 0x85, 0x36, 0x7f, 0x1b, 0x6d, 0x7a, 0x2f, 0x9a, 0x5a, 0xab, 0x89, 0xed, 0x1a, 0xc0,
	0x5c, 0xce, 0xf2, 0x52, 0x99, 0xa4, 0x0d, 0xaf, 0x5d, 0x0d, 0x50, 0xce, 0xda, 0xa3, 0xb4, 0x94,
	0xfa, 0x42, 0xd2, 0x36, 0x32, 0x96, 0xa8, 0x63, 0x77, 0xec, 0x36, 0x22, 0x88, 0x5a, 0xf6, 0x04,
	0xe0, 0xa2, 0xc8, 0x2b, 0x3b, 0x04, 0x0c, 0xbb, 0x3d, 0x42, 0xb4, 0xbd, 0xf0, 0x37, 0x0f, 0x0e,
	0xb6, 0x91, 0xb0, 0x91, 0xda, 0x5d, 0x18, 0xe4, 0x85, 0xb8, 0x10, 0x19, 0x4f, 0x89, 0x58, 0x3b,
	0x67, 0xfa, 0x0e, 0x7c, 0x63, 0x1f, 0x8c, 0x4f, 0x15, 0x16, 0x46, 0xc3, 0x4c, 0x9c, 0x1e, 0x21,
	0x74, 0x7d, 0x04, 0xdd, 0x79, 0x95, 0x2a, 0x21, 0xed, 0x62, 0xf5, 0xa2, 0x5a, 0xd6, 0xa3, 0x2a,
	0xad, 0x78, 0x4c, 0x83, 0xd3, 0xa4, 0xb7, 0x9b, 0x56, 0xfc, 0x4c, 0xcf, 0x4e, 0xb7, 0x47, 0x6c,
	0xb9, 0xe8, 0x73, 0xf8, 0xa3, 0x07, 0xbd, 0xba, 0x0d, 0x3e, 0xfa, 0x1d, 0x46, 0xd0, 0xaa, 0x0a,
	0xf7, 0x69, 0xa3, 0x8f, 0xf5, 0x14, 0x6d, 0x37, 0xa6, 0xe8, 0xc6, 0x57, 0x4c, 0x67, 0xf5, 0x15,
	0x73, 0xfa, 0xb7, 0x07, 0x87, 0xee, 0x1b, 0xce, 0x2c, 0x01, 0xbd, 0xb5, 0x74, 0x71, 0x9c, 0xc1,
	0xb5, 0x31, 0x5f, 0xae, 0xdf, 0xb1, 0x1b, 0xb6, 0xf0, 0xae, 0x7c, 0x21, 0x1e, 0x1d, 0x6c, 0xe0,
	0x32, 0x5d, 0x86, 0xff, 0x63, 0x4f, 0xc8, 0xc8, 0x73, 0x54, 0x76, 0x33, 0xd3, 0xc0, 0x39, 0x5c,
	0xdf, 0xe1, 0xce, 0xc6, 0xf5, 0xab, 0xb0, 0x31, 0xf1, 0x3d, 0x1c, 0x8e, 0xf9, 0xb2, 0xb1, 0x3a,
	0xdc, 0x47, 0xe0, 0xad, 0xe6, 0x38, 0x59, 0x5b, 0x76, 0x47, 0x37, 0xb7, 0x5d, 0x91, 0xb9, 0xd3,
	0x5f, 0x7d, 0x38, 0x88, 0x50, 0xaf, 0x4e, 0xbb, 0x9e, 0x5d, 0xbe, 0xcf, 0x61, 0x34, 0xe6, 0xcb,
	0xb5, 0x2b, 0x56, 0xf7, 0xd9, 0x96, 0x4d, 0xfe, 0xde, 0x9c, 0xbf, 0x83, 0x83, 0xab, 0x86, 0xc6,
	0x2a, 0x97, 0x1f, 0x67, 0xec, 0x29, 0x11, 0x68, 0x37, 0xbc, 0x0b, 0xcb, 0x11, 0xb8, 0xbe, 0xf8,
	0xff, 0xa5, 0x0d, 0xc5, 0x95, 0x28, 0x3f, 0xd4, 0xc6, 0xd3, 0xdb, 0x30, 0xcc, 0x50, 0x3d, 0xfa,
	0xe2, 0xb1, 0x50, 0x46, 0xe3, 0x69, 0xe7, 0x95, 0xfe, 0x79, 0xe5, 0xfd, 0xe2, 0xfb, 0x6f, 0x5f,
	0xbe, 0xdb, 0x21, 0xf0, 0xf1, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa1, 0xb3, 0x3d, 0x78, 0x56,
	0x0c, 0x00, 0x00,
}
